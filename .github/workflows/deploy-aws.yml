name: Deploy to AWS Lambda (Docker Container)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-west-3
  ENVIRONMENT: mvp
  STACK_NAME: sentiment-analysis-lambda-container-mvp

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Set up DVC
      uses: iterative/setup-dvc@v1
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Pull models with DVC
      run: dvc pull
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v --cov=app --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set up DVC
      uses: iterative/setup-dvc@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Pull models with DVC
      run: dvc pull
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Get AWS Account ID
      id: aws-account
      run: |
        echo "account_id=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_OUTPUT

    - name: Build Lambda Docker image
      run: |
        docker build -f Dockerfile.lambda -t ${{ env.ENVIRONMENT }}-sentiment-analysis-api:latest .

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.aws-account.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

    - name: Create ECR repository (if not exists)
      run: |
        aws ecr describe-repositories --repository-names "${{ env.ENVIRONMENT }}-sentiment-analysis-api" --region ${{ env.AWS_REGION }} || \
        aws ecr create-repository --repository-name "${{ env.ENVIRONMENT }}-sentiment-analysis-api" --region ${{ env.AWS_REGION }}

    - name: Tag and push Docker image to ECR
      run: |
        ECR_URI="${{ steps.aws-account.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ENVIRONMENT }}-sentiment-analysis-api:latest"
        docker tag ${{ env.ENVIRONMENT }}-sentiment-analysis-api:latest $ECR_URI
        docker push $ECR_URI

    - name: Check and fix CloudFormation stack
      run: |
        # Check stack status
        STACK_STATUS=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.STACK_NAME }} \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].StackStatus' \
          --output text 2>/dev/null || echo "STACK_NOT_FOUND")
        
        echo "Current stack status: $STACK_STATUS"
        
        # Delete stack if in ROLLBACK_COMPLETE state
        if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ]; then
          echo "Stack is in ROLLBACK_COMPLETE state. Deleting stack..."
          aws cloudformation delete-stack --stack-name ${{ env.STACK_NAME }} --region ${{ env.AWS_REGION }}
          aws cloudformation wait stack-delete-complete --stack-name ${{ env.STACK_NAME }} --region ${{ env.AWS_REGION }}
          echo "Stack deleted successfully"
        fi

    - name: Deploy CloudFormation stack
      run: |
        aws cloudformation deploy \
          --template-file aws/lambda-container-deployment.yml \
          --stack-name ${{ env.STACK_NAME }} \
          --parameter-overrides Environment=${{ env.ENVIRONMENT }} \
          --capabilities CAPABILITY_NAMED_IAM \
          --region ${{ env.AWS_REGION }}

    - name: Get API Gateway URL
      id: get-url
      run: |
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.STACK_NAME }} \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
          --output text)
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT

    - name: Test deployment
      run: |
        # Wait for Lambda to be ready
        sleep 30
        
        # Test health endpoint
        curl -f "${{ steps.get-url.outputs.api_url }}/health" || echo "Health check failed - Lambda may still be warming up"

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸš€ **Lambda Docker deployment completed!**
          
          **API URL**: ${{ steps.get-url.outputs.api_url }}
          **Documentation**: ${{ steps.get-url.outputs.api_url }}/docs
          **Health Check**: ${{ steps.get-url.outputs.api_url }}/health
          
          Test your API:
          \`\`\`bash
          curl -X POST "${{ steps.get-url.outputs.api_url }}/predict-sentiment/" \\
               -H "Content-Type: application/json" \\
               -d '{"text": "I really enjoyed this movie!"}'
          \`\`\`
          
          **Cost**: ~$0.60/month for MVP usage`
          }) 